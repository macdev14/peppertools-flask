[
    {
        "label": "*",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "QRcode",
        "importPath": "flask_qrcode",
        "description": "flask_qrcode",
        "isExtraImport": true,
        "detail": "flask_qrcode",
        "documentation": {}
    },
    {
        "label": "QRcode",
        "importPath": "flask_qrcode",
        "description": "flask_qrcode",
        "isExtraImport": true,
        "detail": "flask_qrcode",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Markup",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "cross_origin",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "flask_session.__init__",
        "description": "flask_session.__init__",
        "isExtraImport": true,
        "detail": "flask_session.__init__",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "flask_session.__init__",
        "description": "flask_session.__init__",
        "isExtraImport": true,
        "detail": "flask_session.__init__",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "flask_session",
        "description": "flask_session",
        "isExtraImport": true,
        "detail": "flask_session",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "flask_session",
        "description": "flask_session",
        "isExtraImport": true,
        "detail": "flask_session",
        "documentation": {}
    },
    {
        "label": "mkdtemp",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "mkdtemp",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "SocketIO",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "default_exceptions",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "InternalServerError",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "default_exceptions",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "InternalServerError",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "default_exceptions",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "InternalServerError",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "Undefined",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "Undefined",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "model_to_dict",
        "importPath": "playhouse.shortcuts",
        "description": "playhouse.shortcuts",
        "isExtraImport": true,
        "detail": "playhouse.shortcuts",
        "documentation": {}
    },
    {
        "label": "dict_to_model",
        "importPath": "playhouse.shortcuts",
        "description": "playhouse.shortcuts",
        "isExtraImport": true,
        "detail": "playhouse.shortcuts",
        "documentation": {}
    },
    {
        "label": "model_to_dict",
        "importPath": "playhouse.shortcuts",
        "description": "playhouse.shortcuts",
        "isExtraImport": true,
        "detail": "playhouse.shortcuts",
        "documentation": {}
    },
    {
        "label": "dict_to_model",
        "importPath": "playhouse.shortcuts",
        "description": "playhouse.shortcuts",
        "isExtraImport": true,
        "detail": "playhouse.shortcuts",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "model",
        "description": "model",
        "isExtraImport": true,
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "model",
        "description": "model",
        "isExtraImport": true,
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "model",
        "description": "model",
        "isExtraImport": true,
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "model",
        "description": "model",
        "isExtraImport": true,
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "page",
        "description": "page",
        "isExtraImport": true,
        "detail": "page",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "SQL",
        "importPath": "cs50",
        "description": "cs50",
        "isExtraImport": true,
        "detail": "cs50",
        "documentation": {}
    },
    {
        "label": "SQL",
        "importPath": "cs50",
        "description": "cs50",
        "isExtraImport": true,
        "detail": "cs50",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "flask_ssl",
        "description": "flask_ssl",
        "isExtraImport": true,
        "detail": "flask_ssl",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "PyJwtValidator",
        "importPath": "py_jwt_validator",
        "description": "py_jwt_validator",
        "isExtraImport": true,
        "detail": "py_jwt_validator",
        "documentation": {}
    },
    {
        "label": "PyJwtException",
        "importPath": "py_jwt_validator",
        "description": "py_jwt_validator",
        "isExtraImport": true,
        "detail": "py_jwt_validator",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "expanduser",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "urllib.parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "before_request",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def before_request():\n    \"\"\"Connect to the database before each request\"\"\"\n    db.connect()\n@app.after_request\ndef after_request(response):\n    db.close()\n    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n    response.headers[\"Expires\"] = 0\n    response.headers[\"Pragma\"] = \"no-cache\"\n    response.headers['Access-Control-Allow-Origin'] = '*'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "after_request",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def after_request(response):\n    db.close()\n    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n    response.headers[\"Expires\"] = 0\n    response.headers[\"Pragma\"] = \"no-cache\"\n    response.headers['Access-Control-Allow-Origin'] = '*'\n   # response.headers[\"authorization\"] = session.get('_permanent')\n    response.headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n    response.headers[\"Access-Control-Allow-Headers\"] = \"Access-Control-Allow-Headers, Authorization, Origin, X-Requested-With, Content-Type, Accept\"\n    response.headers[\"Access-Control-Allow-Methods\"] = \"GET,HEAD,OPTIONS,POST,PUT\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "favicon",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def favicon():\n    return send_from_directory(os.path.join(app.root_path, 'static'),\n                          'favicon.ico',mimetype='image/vnd.microsoft.icon')\n@app.route('/')\n@login_required\n@managerLevel\ndef index():\n    os = os_em_historico()\n    #os = Cadastro_OS.select(Cadastro_OS.Id, Cadastro_OS.Numero_Os).join(Historico_os, on=(Cadastro_OS.Id == Historico_os.id_os)).distinct()\n    #historico_os = Historico_os.select().dicts()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    os = os_em_historico()\n    #os = Cadastro_OS.select(Cadastro_OS.Id, Cadastro_OS.Numero_Os).join(Historico_os, on=(Cadastro_OS.Id == Historico_os.id_os)).distinct()\n    #historico_os = Historico_os.select().dicts()\n    response = Response(render_template(\"home.html\", title= \"Inicio\", auth=session.get('token'), historico_os=os,active1=\"active\",active2=\"\", active3=\"\", active4=\"\"))\n   # print(session.get('token'))\n    response.headers['authorization'] = session.get('_permanent')\n    return response\n@app.route('/historico')\n@login_required",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "historico",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def historico():\n    os = Cadastro_OS.select(Cadastro_OS.Id, Cadastro_OS.Numero_Os).join(Historico_os, on=(Cadastro_OS.Id == Historico_os.id_os)).distinct()\n\"\"\"@app.route('/estoque')\n@login_required\ndef estoque():\n    keys = Estoque._meta.fields.keys()\n    columns = list(keys)\n    columns.remove('id_cliente')\n    columns.remove('ID')\n    columns.remove('data')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "estoque",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def estoque():\n    keys = Estoque._meta.fields.keys()\n    columns = list(keys)\n    columns.remove('id_cliente')\n    columns.remove('ID')\n    columns.remove('data')\n    response = Response(render_template(\"list.html\", title= \"Estoque\", client = True, tableCol=columns, table=\"estoque\", columns=columns, col_len=len(columns), active1=\"\",active2=\"active\", active3=\"\", active4=\"\"))\n   # print(session.get('token'))\n    response.headers['authorization'] = session.get('_permanent')\n    return response\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "clientes",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def clientes():\n    #return getClientes(\"key\",\"*\")\n    return render_template(\"clientes.html\", auth=session.get('token'), title=\"Clientes\", active1=\"\",active2=\"\", active3=\"\", active4=\"active\")\n@app.route('/clientes/buscar')\n@login_required\n@managerLevel\ndef search():\n    return underdev()\n@app.route('/clientes/form/', methods=[\"GET\", \"POST\"])\n@login_required",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def search():\n    return underdev()\n@app.route('/clientes/form/', methods=[\"GET\", \"POST\"])\n@login_required\n@managerLevel\ndef cadCli():\n    if request.method == 'GET':\n        clientes = list(Clientes._meta.fields.keys())\n        print(clientes)\n        return render_template(\"Form.html\", TableCol=clientes, TableLen = len(clientes), table='clientes' , edit=False, id=id, active1=\"\",active2=\"\", active3=\"\", active4=\"active\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "cadCli",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def cadCli():\n    if request.method == 'GET':\n        clientes = list(Clientes._meta.fields.keys())\n        print(clientes)\n        return render_template(\"Form.html\", TableCol=clientes, TableLen = len(clientes), table='clientes' , edit=False, id=id, active1=\"\",active2=\"\", active3=\"\", active4=\"active\")\n       # return render_template(\"client_edit.html\", clientes2=clientes, cliLen=len(clientes), edit=False, id=id, active1=\"\",active2=\"\", active3=\"active\", active4=\"\")\n    elif request.method == 'POST':   # clientes = getData(\" \",\"*\", \"Clientes\")\n        try:\n            if request.form:\n                data = dict(request.form)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "editCli",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def editCli(cliId):\n    if request.method == 'GET':\n        clientes = Clientes.select().where(Clientes.ID == cliId)\n        if not clientes:\n            flash('Erro ao encontrar cliente.')\n            return redirect('/clientes/form/')\n        clientesCol = list(Clientes._meta.fields.keys())\n        print(clientesCol[0])\n        cliLen = len(clientesCol)\n       # print(clientes)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "osAll",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def osAll():\n    try:\n        session.pop('osid')\n    except:\n        pass\n    return render_template(\"os.html\", auth=session.get('token'), active1=\"\",active2=\"\", active3=\"\", active4=\"active\", title=\"Ordem de Serviço\")     \n@app.route(\"/os/imprimir\")\n@login_required\n@managerLevel\ndef print1():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "print1",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def print1():\n    #return render_template(\"imprimir_os.html\", title= \"Inicio\", active1=\"active\",active2=\"\", active3=\"\", active4=\"active\")\n    return underdev()\n@app.route(\"/os/buscar\")\n@login_required\n@adminLevel\ndef buscar():\n    #return render_template(\"buscar_os.html\", title= \"Inicio\", active1=\"\",active2=\"\", active3=\"\", active4=\"active\")\n    return underdev()\n@app.route('/login', methods=[\"GET\", \"POST\"])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "buscar",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def buscar():\n    #return render_template(\"buscar_os.html\", title= \"Inicio\", active1=\"\",active2=\"\", active3=\"\", active4=\"active\")\n    return underdev()\n@app.route('/login', methods=[\"GET\", \"POST\"])\ndef login():\n    \"\"\"\n    if not request.is_secure and app.env != \"development\":\n        url = request.url.replace(\"http://\", \"https://\", 1)\n        code = 301\n        return redirect(url, code=code) \"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login():\n    \"\"\"\n    if not request.is_secure and app.env != \"development\":\n        url = request.url.replace(\"http://\", \"https://\", 1)\n        code = 301\n        return redirect(url, code=code) \"\"\"\n    tz = pytz.timezone('America/Sao_Paulo')\n    x = datetime.datetime.now(tz=tz)\n    date = x.strftime(\"%d/%m/%Y\")\n    if request.method == 'POST':",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def logout():\n    return logoutCommit()\n@app.route(\"/os/total\")\n@login_required\ndef all():\n    nos = Cadastro_OS.select(fn.MAX(Cadastro_OS.Id)).get()\n    print(nos)\n    return jsonify(nos)\n@app.route('/os/form/', methods=[\"POST\", \"GET\"])\n@login_required",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "all",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def all():\n    nos = Cadastro_OS.select(fn.MAX(Cadastro_OS.Id)).get()\n    print(nos)\n    return jsonify(nos)\n@app.route('/os/form/', methods=[\"POST\", \"GET\"])\n@login_required\n@managerLevel\ndef new_os():\n    #clients = db.execute('SELECT DISTINCT Clientes.ID, nome FROM Cadastro_OS, Clientes WHERE Cadastro_OS.id_cliente = Clientes.ID')\n        clients = Clientes.select(Clientes.ID, Clientes.nome).join(Cadastro_OS, on=(Cadastro_OS.Id_Cliente == Clientes.ID)).distinct()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "new_os",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def new_os():\n    #clients = db.execute('SELECT DISTINCT Clientes.ID, nome FROM Cadastro_OS, Clientes WHERE Cadastro_OS.id_cliente = Clientes.ID')\n        clients = Clientes.select(Clientes.ID, Clientes.nome).join(Cadastro_OS, on=(Cadastro_OS.Id_Cliente == Clientes.ID)).distinct()\n        print(clients)\n        x = datetime.datetime.now()\n        date = x.strftime(\"%d/%m/%Y\")\n        #os_num = db.execute('SELECT MAX(Numero_Os) AS num_os FROM Cadastro_OS')\n        os_num = int(Cadastro_OS.select(fn.MAX(Cadastro_OS.Numero_Os)).scalar())+1\n        clients_len = len(clients)\n        if request.method == 'POST':",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "os_edit",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def os_edit(osid):\n    if request.method == 'POST':\n        if not 'id_Linha' in request.form:\n            flash('Selecione uma Linha de Produto')\n            return redirect('/os/form/'+str(osid))\n        elif not 'Id_Cliente' in request.form:\n            flash('Selecione um Cliente')\n            return redirect('/os/form/'+str(osid))\n        data = dict(request.form)\n        try:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "os_del",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def os_del(osid):\n    if request.method == 'GET':\n        try:\n            Cadastro_OS.delete().where(Cadastro_OS.Id == osid).execute()\n            flash('O.S deletada com sucesso')\n            return redirect('/os/form/')\n        except:\n            flash('Erro ao deletar O.S')\n            return redirect('/os/form/'+str(osid))\n    flash('Erro ao deletar O.S')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def register():\n    if request.method == 'POST':\n        rows = usuarios.select().where(usuarios.ds_login == request.form.get(\"username\"))\n        rows=[model_to_dict(row) for row in rows]\n            #rows = db.execute(\"SELECT * FROM usuarios WHERE ds_login = \\'\"+ request.form.get(\"username\") + \"\\'\")\n        rowsPass = usuarios.select().where(usuarios.ds_login == request.form.get(\"username\"))\n        rowsPass=[model_to_dict(row) for row in rowsPass]\n            #rowsPass = db.execute(\"SELECT * FROM usuarios WHERE ds_senha = \"+ generate_password_hash(request.form.get(\"password\")))\n        if len(rows) == 1 or len(rowsPass) == 1:\n            flash(\"User or password already exists\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "print_os",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def print_os(osid):\n    print(osid)\n    if request.method == 'GET':\n        rows = list(Cadastro_OS.select().where(Cadastro_OS.Id == osid).dicts())\n        maxPeriod = Historico_os.select(fn.MAX(Historico_os.periodo)).where(Historico_os.id_proc == rows[0]['STATUS']).scalar()\n        print(rows[0])\n        allProcessos = list(processos.select(processos.Nome, processos.ID).from_(processos, Historico_os).where(processos.ID == Historico_os.id_proc, Historico_os.id_os == osid, Historico_os.periodo==maxPeriod).dicts())\n        print(allProcessos)\n        #os = getOs(osid)\n        if not os:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "access",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def access(osid):\n    session['osid'] = osid\n    return redirect('/login')\n@app.route('/estoque/form/', methods = ['POST', 'GET'])\n@login_required\ndef cadEstoque():\n    clients = Clientes.select(Clientes.nome, Clientes.ID)\n        #clientes = list(Estoque._meta.fields.keys())\n    estKeys = list(Estoque._meta.fields.keys())\n        #clientes = clientes[0]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "cadEstoque",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def cadEstoque():\n    clients = Clientes.select(Clientes.nome, Clientes.ID)\n        #clientes = list(Estoque._meta.fields.keys())\n    estKeys = list(Estoque._meta.fields.keys())\n        #clientes = clientes[0]\n    if request.method == 'POST' and request.form: \n        #3 try:      \n        data = dict(request.form)\n        if not data['data']:\n            data['data'] = datetime.datetime.now().strftime('%d/%m/%Y')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "editEstoque",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def editEstoque(estId):\n    clients = Clientes.select(Clientes.nome, Clientes.ID)\n    #clients = db.execute('SELECT DISTINCT Clientes.ID, nome FROM Cadastro_OS, Clientes WHERE Cadastro_OS.Id_Cliente = Clientes.ID')\n    if request.method == 'GET':\n        try:\n            estoque = Estoque.select(Estoque, Clientes.ID, Clientes.nome).from_(Estoque, Clientes).where(Estoque.id_cliente == Clientes.ID, Estoque.ID == estId) #getData(\" \", \"*\", \"Estoque WHERE ID = \"+ str(estId))\n            estoque = [model_to_dict(item) for item in estoque]\n            print(estoque)\n            try:\n                estoque[0]['data'] = estoque[0]['data'].strftime(\"%d/%m/%Y\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "invoice",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def invoice():\n    Keys = list(orcamento._meta.fields.keys())\n    data = datetime.datetime.now().strftime('%d/%m/%Y')\n    if request.method == 'POST' and request.form:\n        #try:\n        orcamento.create(numero=request.form['numero'], ano = request.form['ano'], cod_item=request.form['cod_item'], data= request.form['data'], cod_func=request.form['cod_func'], id_cliente=request.form['id_cliente'],prazo_entrega=request.form['prazo_entrega'], prazo_pagto=request.form['prazo_pagto'], ipi=request.form['ipi'], icms=request.form['icms'])\n        idorcam = orcamento.select(fn.MAX(orcamento.ID)).scalar()\n        flash('Cadastrado com sucesso!')\n        return redirect('/orcamento/form/'+ str(idorcam))\n        #except:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "invoiceEdit",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def invoiceEdit(inid):\n    if request.method == 'POST':\n        orcamento.update(numero=request.form['numero'], ano = request.form['ano'], cod_item=request.form['cod_item'], data= request.form['data'], id_cliente = request.form['id_cliente'], cod_func=request.form['cod_func'], prazo_entrega=request.form['prazo_entrega'], prazo_pagto=request.form['prazo_pagto'], ipi=request.form['ipi'], icms=request.form['icms']).where(orcamento.ID == inid).execute()\n    Keys = list(orcamento._meta.fields.keys())\n    clients = list(Clientes.select(Clientes.nome, Clientes.ID).dicts())\n    items = list(Estoque.select(Estoque.ferramenta, Estoque.ID).dicts())\n    invoice = orcamento.select().where(orcamento.ID == inid)\n    pager = page(table = 'orcamento', content = invoice[0], edit=True, select = clients , select2 = items)\n    return pager.render()\n    #return render_template(\"Form.html\", content=invoice[0], clients=items, cliLen= len(items), cliCol = 'cod_item', selection2=clients, sel2Col='id_cliente', sel2Len=len(clients), TableCol=Keys, TableLen = len(Keys), table='orçamento' , edit=True, id=inid, active1=\"\",active2=\"\", active3=\"active\", active4=\"\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "listing",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def listing():\n    return render_template('table.html')\n@app.route('/contasapagar/form/', methods=['POST', 'GET'])\n@login_required\n@financialLevel\ndef contaspagar():\n    forn = Fornecedores.select(Fornecedores.nome, Fornecedores.ID)\n    Keys = list(contasapagar._meta.fields.keys())\n    if request.method == 'POST':\n       # try:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "contaspagar",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def contaspagar():\n    forn = Fornecedores.select(Fornecedores.nome, Fornecedores.ID)\n    Keys = list(contasapagar._meta.fields.keys())\n    if request.method == 'POST':\n       # try:\n        contasapagar.create(vencimento=datetime.datetime.strptime(request.form['vencimento'], '%d/%m/%Y').strftime('%d/%m/%Y'), descricao= request.form['descricao'], valor=float(request.form['valor'].strip()), pago=float(request.form['pago'].strip()), data_pagamento=datetime.datetime.strptime(request.form['data_pagamento'], \"%d/%m/%Y\").strftime(\"%d/%m/%Y\"), cod_fornecedor=int(request.form['cod_fornecedor']))\n        idconta = contasapagar.select(fn.MAX(contasapagar.ID)).scalar()\n        flash('Cadastrado com Sucesso')\n        return redirect('/contasapagar/form/'+ str(idconta))\n     #   except: ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "editarcontas",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def editarcontas(idconta):\n    forn = Fornecedores.select(Fornecedores.nome, Fornecedores.ID)\n    Keys = list(contasapagar._meta.fields.keys())\n    conta = list(contasapagar.select().where(contasapagar.ID == idconta).dicts())\n    try:\n        conta[0]['vencimento'] = datetime.datetime.strptime(conta[0]['vencimento'] , '%Y-%m-%d').strftime('%d/%m/%Y')\n        conta[0]['data_pagamento'] = datetime.datetime.strptime(conta[0]['vencimento'] , '%Y-%m-%d').strftime('%d/%m/%Y')\n    except:\n        pass\n    if request.method == 'POST':",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "fornecedor",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def fornecedor(idfor):\n    Keys = list(Fornecedores._meta.fields.keys())\n    if idfor != '':\n        if request.method == 'POST':\n            try:\n                Fornecedores.update(cod_for=request.form['cod_for'], nome= request.form['nome'], cnpj=request.form['cnpj'], ie= request.form['ie'], endereco= request.form['endereco'], cidade=request.form['cidade'], estado=request.form['estado'], cep=request.form['cep'], telefone=request.form['telefone'], celular=request.form['celular'], email=request.form['email'], obs=request.form['obs'], qntcompras=request.form['qntcompras']).where(Fornecedores.ID == idfor).execute()\n                flash('Alterado com sucesso')\n            except:\n                flash('Erro ao alterar Fornecedor')\n            return redirect('/fornecedor/form/'+str(idfor))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "comprasform",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def comprasform(idcompra):\n    Keys = list(compras._meta.fields.keys())\n    fornecedores = Fornecedores.select(Fornecedores.ID, Fornecedores.nome)\n    fornecedores_len = len(fornecedores)\n    if idcompra != '':\n        if request.method == 'POST':\n            data = dict(request.form)\n            try:\n                try:\n                    data['qnt'] = int(data['qnt'])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "nfform",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def nfform(idnota):\n    Keys = list(notafiscal._meta.fields.keys())\n    if idnota != '':\n        if request.method == 'POST':\n            data = dict(request.form)\n            try:\n                try:\n                    data['numero_nf'] = int(data['numero_nf'])\n                except:\n                    data['numero_nf']=0  ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "fim",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def fim(idponto):\n    if not idponto:\n        flash('Ponto não encontrada!')\n        return redirect('/ponto/form/')\n    ponto.update(fim=datetime.datetime.now().strftime('%H:%M:%S')).where(ponto.id == idponto).execute()\n    flash('finalizado com successo')\n    return redirect('/ponto/form/'+str(idponto))\n@app.route('/ponto/form/inicio/', methods=['POST', 'GET'])\n@login_required\n@employeeLevel",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "inicio",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def inicio():\n    if request.method == 'POST':\n        try:\n            data = dict(request.form)\n            if not request.form['cod_func'] or request.form['cod_func'] == 0:\n                flash('Selecione colaborador')\n                return redirect('/ponto/form/')\n            desc = data['desc']\n            ponto.create(inicio=datetime.datetime.now().strftime('%H:%M:%S') ,desc=desc ,data=datetime.datetime.now().strftime('%Y-%m-%d'), cod_func=data['cod_func'])\n            idpontonew = ponto.select(fn.MAX(ponto.id)).scalar()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "pontocad",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def pontocad(idponto):\n    Keys = list(ponto._meta.fields.keys())\n    allcol = funcionarios.select(funcionarios.id, funcionarios.nome)\n    if idponto != '':\n        pontohora = list(ponto.select(ponto, funcionarios.id, funcionarios.nome).from_(ponto, funcionarios).where(ponto.id == idponto).dicts())\n        if not pontohora:\n            flash('Ponto Não Encontrado')\n            return redirect('/ponto/form/')\n        if request.method == 'POST':\n            data = dict(request.form)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "pedido",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def pedido(idpedido):\n    if idpedido != '':\n        if request.method == 'GET':\n            content = Pedidos.select().where(Pedidos.id == idpedido)\n            pagePedido = page('pedidos', content[0], edit=True)\n            return pagePedido.render()\n        elif request.method == 'POST':\n            Pedidos.update(numero = request.form['numero'], ano = request.form['ano'], id_cliente=request.form['id_cliente'], id_ferramenta= request.form['id_ferramenta'], especificacao= request.form['especificacao'], desenho=request.form['desenho'], unidade=request.form['unidade'], qnt= request.form['qnt'], preco=request.form['preco'],  data_entrada=datetime.datetime.strptime(request.form['data_entrada'], '%Y-%m-%d'), prazo=datetime.datetime.strptime(request.form['prazo'], '%Y-%m-%d'), qnt_acabada=request.form['qnt_acabada'], data_acabamento=request.form['data_acabamento'], pedido_cliente=request.form['pedido_cliente'], numero_os=request.form['numero_os'] ).where(pedidos.ID == idpedido).execute()\n            flash(\"Alterado com Sucesso\")\n            return redirect('/funcionarios/form/'+ str(idpedido))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def func(idfunc):\n    if idfunc != '':\n        if request.method == 'GET':\n            content = funcionarios.select().where(funcionarios.id == idfunc)\n            pagefunc = page('funcionarios', content[0], edit=True)\n            return pagefunc.render()\n        elif request.method == 'POST':\n            funcionarios.update(funcionario = request.form['funcionario'], nome = request.form['nome'], senha=request.form['senha']).where(funcionarios.id == idfunc).execute()\n            flash(\"Alterado com Sucesso\")\n            return redirect('/funcionarios/form/'+ str(idfunc))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "processosOs",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def processosOs(idproc):\n    if idproc != '':\n        if request.method == 'GET':\n            content = processos.select().where(processos.ID == idproc)\n            if not content:\n                flash('Não Encontrada!')\n                return redirect('/processos/form/')\n            pagefunc = page('processos', content[0], edit=True)\n            return pagefunc.render()\n        elif request.method == 'POST':",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "renderTable",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def renderTable(table):\n    tablefinan = ['caixa', 'numero_pedidos', 'fornecedores', 'constasapagar', 'constasareceber', 'compras']\n    tablefunc = ['ponto']\n    tablegeren = ['cadastro_os', 'fornecedores', 'numero_pedidos', 'compras', 'material', 'estoque']\n    tok = jwt.decode(session.get('token'), os.environ['SECRET_KEY'], algorithms=['HS256'])\n    if tok['level'] == 4:\n        return render_list(table)\n    if tok['level'] == 3 and table.lower() in tablefinan :\n        return render_list(table)\n    elif tok['level'] == 2 and table.lower() in tablegeren:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "histform",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def histform(idhist):\n    allcol = processos.select(processos.ID, processos.Nome)\n    allos = Cadastro_OS.select(Cadastro_OS.Id, Cadastro_OS.Numero_Os)\n    if idhist != '':\n       if request.method == 'POST':\n           try:\n              if request.form['data'] != '':\n                 data  = datetime.datetime.strptime(str(request.form['data']), '%d/%m/%Y').strftime('%Y-%m-%d')\n           except:\n                pass",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "deleterow",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def deleterow(col, idtab):\n    if col != '' and idtab >= 0:\n        try:\n            try:    \n                str_to_class(col).delete().where(str_to_class(col).id == idtab).execute()\n                flash('Deletado com sucesso!')\n                return redirect('/'+str(col.lower())+'/form/')\n            except:\n                pass\n            try:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "redirect_num",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def redirect_num(n_os):\n    try:\n        idos = list(Cadastro_OS.select(Cadastro_OS.Id).where(Cadastro_OS.Numero_Os == n_os).dicts())\n        print(idos[0]['Id'])\n        return redirect('/os/form/'+ str(idos[0]['Id']))\n    except:\n        return redirect('#')\n@app.route('/linha/form/', defaults={'idlinha': ''}, methods=['POST', 'GET'])\n@app.route('/linha/form/<int:idlinha>', methods=['POST', 'GET'])\n@login_required",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "linha_os",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def linha_os(idlinha):\n    if idlinha!='':\n        content = linha.select().where(linha.id==idlinha)\n        if request.method == 'POST':\n            try:\n                num = int(request.form['numero_inicial'])\n            except:\n                num = 0\n            content.update(nome= request.form['nome'], numero_inicial = num).execute()\n        pageLinha = page('linha', content=content[0])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "invalid_route",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def invalid_route(e): \n    return underdev()\n\"\"\"\n*** API ROUTES ***",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "longlogin",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def longlogin():\n    obj = json.loads(request.data)\n    rows = usuarios.select(usuarios.ds_senha).where(usuarios.ds_login == obj['username'])\n     #rows = db.execute('SELECT ds_senha FROM usuarios WHERE  ds_login = ?', obj['username'])\n    rows = [model_to_dict(row) for row in rows]\n        #obj = json.loads(request.data)\n     #print(obj['username'])\n    password = obj['password']\n    print(obj['password'])\n    if check_password_hash(rows[0][\"ds_senha\"], password) or rows[0][\"ds_senha\"] == password:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def log():\n    obj = json.loads(request.data)\n    try:\n        obj = (obj['data'])\n    except:\n        pass\n    print(obj)\n    print(obj['username'])\n    rows = usuarios.select(usuarios.ds_senha).where(usuarios.ds_login == obj['username'])\n     #rows = db.execute('SELECT ds_senha FROM usuarios WHERE  ds_login = ?', obj['username'])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "all_api",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def all_api():\n    rows = Cadastro_OS.select()\n    rows = [model_to_dict(row) for row in rows]\n    return rows\n@app.route('/api/os/<int:osid>', methods=['POST', 'GET'])\n@auth_required\n@cross_origin()\ndef osApi(osid):\n    try:\n        rows = Cadastro_OS.select().where(Cadastro_OS.Id == osid)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "osApi",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def osApi(osid):\n    try:\n        rows = Cadastro_OS.select().where(Cadastro_OS.Id == osid)\n        rows = [model_to_dict(row) for row in rows]\n        #rows = db.execute('SELECT * FROM Cadastro_OS WHERE Id = '+ str(osid))\n        if not rows:\n            return jsonify('Not found')\n        if request.method == 'POST':\n             obj = json.loads(request.data)\n             try:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "osApiall",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def osApiall(limit):\n  #  try:\n        rows = list(Cadastro_OS.select(Cadastro_OS, Clientes.nome).from_(Cadastro_OS, Clientes).where(Cadastro_OS.Id_Cliente == Clientes.ID).order_by(Cadastro_OS.Numero_Os.desc()).limit(int(limit)).dicts())\n        #print()\n       # print(rows)\n        #rows = [model_to_dict(row) for row in rows]\n        #stmt = \"SELECT c.ID, c.nome, o.Tipo, o.Especificacao, o.Prazo, o.Numero_Os, o.Id_Cliente, o.Id, o.Data FROM Clientes c, Cadastro_OS o WHERE c.ID=o.Id_Cliente ORDER BY o.Numero_Os DESC LIMIT \" + str(limit)\n        if request.method == 'GET':\n            #db.execute('SELECT * FROM Cadastro_OS ORDER BY Id DESC LIMIT '+ str(limit))\n            return jsonify(list(rows))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "osApiSearch",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def osApiSearch(query):\n  #  try:\n        if len(query) < 2:\n         #   rows = list(Cadastro_OS.select(Cadastro_OS, Clientes.nome).from_(Cadastro_OS, Clientes).where(Cadastro_OS.Especificacao.contains(query), Cadastro_OS.Id_Cliente == Clientes.ID).order_by(Cadastro_OS.Numero_Os.desc()).limit(int(limit)).dicts())\n            rows = list(Cadastro_OS.select(Cadastro_OS, Clientes.nome).from_(Cadastro_OS, Clientes).where(Cadastro_OS.Especificacao.contains(query), Cadastro_OS.Id_Cliente == Clientes.ID).order_by(Cadastro_OS.Numero_Os.desc()).limit(200).dicts())\n        else:\n            rows = list(Cadastro_OS.select(Cadastro_OS, Clientes.nome).from_(Cadastro_OS, Clientes).where(Cadastro_OS.Especificacao.contains(query), Cadastro_OS.Id_Cliente == Clientes.ID).order_by(Cadastro_OS.Numero_Os.desc()).dicts())\n        #stmt = \"SELECT c.ID, c.nome, o.Tipo, o.Prazo, o.Especificacao, o.Numero_Os, o.Id_Cliente, o.Id, o.Data FROM Clientes c, Cadastro_OS o WHERE c.ID=o.Id_Cliente AND o.Especificacao LIKE '%\" + str(query) + \"%' ORDER BY o.Numero_Os DESC \"\n     #   if limit > 0:\n     #       stmt += \" LIMIT \" + str(limit)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "osApiNum",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def osApiNum():\n    try:\n          os_num = Cadastro_OS.select(fn.MAX(Cadastro_OS.Numero_Os)).scalar()\n          os_num = int(os_num) + 1\n          return jsonify(os_num)\n    except:\n        return jsonify('Error')\n@app.route('/api/clientes', methods=['GET', 'POST'])\n@auth_required\ndef allClientes():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "allClientes",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def allClientes():\n    clients = list(Clientes.select().dicts())\n    #clients = [model_to_dict(client) for client in clients]\n    return jsonify(clients)\n@cross_origin(origin='*',headers=['Content- Type','Authorization', 'authorization'])\n@app.route('/api/processos/inicio', methods=['POST'])\n@auth_required\ndef inicioProcesso():\n    obj = json.loads(request.data)\n    osid = obj['osid']",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "inicioProcesso",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def inicioProcesso():\n    obj = json.loads(request.data)\n    osid = obj['osid']\n    horario = obj['horario']\n    idproc = obj['idProc']\n    qtd = obj['qtd']\n    altos = Cadastro_OS.select().where(Cadastro_OS.Id == osid).get()\n    altos.STATUS = idproc\n    altos.save()\n    osproc = Historico_os.select().where((Historico_os.id_os == osid) & (Historico_os.id_proc == idproc) & (Historico_os.inicio != '') )",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "allProcesso",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def allProcesso():\n    if request.method == 'GET':\n        process_list = processos.select()\n        process_list = [model_to_dict(processo) for processo in process_list]\n        return jsonify(process_list)\n@cross_origin(origin='*',headers=['Content- Type','Authorization', 'authorization'])\n@app.route('/api/processos/fim', methods=['POST'])\n@auth_required\ndef fimProcesso():\n    obj = json.loads(request.data)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "fimProcesso",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def fimProcesso():\n    obj = json.loads(request.data)\n    osid = obj['osid']\n    horario = obj['horario']\n    idproc = obj['idProc']\n    periodo = Historico_os.select(fn.MAX(Historico_os.periodo)).where((Historico_os.id_os == osid)  &\n    (Historico_os.id_proc == idproc)).scalar()\n    if not periodo:\n        periodo = 1\n    althistos = Historico_os.select().where( ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "IdClientes",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def IdClientes(id):\n    #stmt = \"SELECT ID, nome FROM Clientes ORDER BY nome ASC\"\n    res = Clientes.select(Clientes.ID, Clientes.nome).where(Clientes.ID == id).order_by(Clientes.ID.asc())\n    return jsonify(model_to_dict(res))\n@app.route('/api/clientes/', defaults={'query': 'none'}, methods=['POST', 'GET'])\n@app.route('/api/clientes/q=<string:query>', methods=['POST', 'GET'])\n@auth_required\ndef nome(query):\n    #stmt = \"SELECT ID, nome FROM Clientes ORDER BY nome ASC\"\n    res = list(Clientes.select().where(Clientes.nome.contains(query)).order_by(Clientes.ID.asc()).dicts())",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def nome(query):\n    #stmt = \"SELECT ID, nome FROM Clientes ORDER BY nome ASC\"\n    res = list(Clientes.select().where(Clientes.nome.contains(query)).order_by(Clientes.ID.asc()).dicts())\n    #res = [model_to_dict(row) for row in res]\n    return jsonify(res)\n@app.route('/api/clientes/limit=<int:limit>', methods=['GET','POST'])\n@auth_required\ndef cliLimit(limit):\n    res = list(Clientes.select().order_by(Clientes.ID.asc()).limit(int(limit)).dicts())\n    #res = [model_to_dict(row) for row in res]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "cliLimit",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def cliLimit(limit):\n    res = list(Clientes.select().order_by(Clientes.ID.asc()).limit(int(limit)).dicts())\n    #res = [model_to_dict(row) for row in res]\n    return jsonify(res)\n@app.route('/api/estoque/limit=<int:limit>', methods=['GET','POST'])\n@auth_required\ndef allEstoque(limit):\n    if request.method == 'GET':\n        rows = list(Estoque.select(Estoque, Clientes.nome).from_(Estoque, Clientes).where(Estoque.id_cliente == Clientes.ID).order_by(Estoque.qt.desc()).dicts())\n        print(rows)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "allEstoque",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def allEstoque(limit):\n    if request.method == 'GET':\n        rows = list(Estoque.select(Estoque, Clientes.nome).from_(Estoque, Clientes).where(Estoque.id_cliente == Clientes.ID).order_by(Estoque.qt.desc()).dicts())\n        print(rows)\n        return jsonify(rows)\n    elif request.method == 'POST' and request.data:\n          #  try:\n        obj = json.loads(request.data)\n        insertData(obj, 'Estoque')\n        return jsonify('Item-criado')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "queryEstoque",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def queryEstoque(query, col):\n    rows = Estoque.select(Estoque, Clientes.nome).from_(Estoque, Clientes).where(Estoque.id_cliente == Clientes.ID, Estoque[col].contains(query)).order_by(Estoque.qt.desc())\n    #stmt = \"SELECT e.*, c.nome FROM Estoque e, Clientes c WHERE c.ID = e.id_cliente AND \"+ col + \"=\" + query +\" ORDER BY e.ID DESC\"\n    #print(stmt)\n    #rows = db.execute(stmt)  \n    return jsonify(rows)\n@app.route('/api/progress/<int:n_os>', methods=['GET'])\n@auth_required\ndef progress(n_os):\n    return os_em_andamento(n_os)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "progress",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def progress(n_os):\n    return os_em_andamento(n_os)\nif __name__ == \"__main__\" :\n     app.run(debug=True)\n     socketio.run(app, debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "\"\"\"os.environ['SECRET_KEY']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "\"\"\"os.environ['SECRET_KEY'] =  \"caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79\"\nos.environ['DB'] =  \"mysql://rkpmtiv6bbvm81e5:bfm5w4ohfjp7ldw8@nwhazdrp7hdpd4a4.cbetxkdyhwsb.us-east-1.rds.amazonaws.com:3306/ztqqdjf98kpnzn4nn \"\nos.environ['HOST']= \"nwhazdrp7hdpd4a4.cbetxkdyhwsb.us-east-1.rds.amazonaws.com\"\nos.environ['USER'] =  \"rkpmtiv6bbvm81e5\"\nos.environ['PASSWORD'] = \"yz1mq64u3h1sab93\"\nos.environ['DATABASE'] = \"ztqqdjf98kpnzn4n\"\ndb = SQL(os.environ['DB'])\"\"\"\n#db = SQL(\"sqlite:///peppertools.db\")\napp = Flask(__name__)\napp.add_template_global(get_level,name='get_level')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "os.environ['DB']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "os.environ['DB'] =  \"mysql://rkpmtiv6bbvm81e5:bfm5w4ohfjp7ldw8@nwhazdrp7hdpd4a4.cbetxkdyhwsb.us-east-1.rds.amazonaws.com:3306/ztqqdjf98kpnzn4nn \"\nos.environ['HOST']= \"nwhazdrp7hdpd4a4.cbetxkdyhwsb.us-east-1.rds.amazonaws.com\"\nos.environ['USER'] =  \"rkpmtiv6bbvm81e5\"\nos.environ['PASSWORD'] = \"yz1mq64u3h1sab93\"\nos.environ['DATABASE'] = \"ztqqdjf98kpnzn4n\"\ndb = SQL(os.environ['DB'])\"\"\"\n#db = SQL(\"sqlite:///peppertools.db\")\napp = Flask(__name__)\napp.add_template_global(get_level,name='get_level')\nJINJA2_ENVIRONMENT_OPTIONS = { 'undefined' : Undefined, '' : None,  'get_level': get_level}",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "os.environ['USER']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "os.environ['USER'] =  \"rkpmtiv6bbvm81e5\"\nos.environ['PASSWORD'] = \"yz1mq64u3h1sab93\"\nos.environ['DATABASE'] = \"ztqqdjf98kpnzn4n\"\ndb = SQL(os.environ['DB'])\"\"\"\n#db = SQL(\"sqlite:///peppertools.db\")\napp = Flask(__name__)\napp.add_template_global(get_level,name='get_level')\nJINJA2_ENVIRONMENT_OPTIONS = { 'undefined' : Undefined, '' : None,  'get_level': get_level}\nsocketio = SocketIO(app)\ncors = CORS(app)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "os.environ['PASSWORD']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "os.environ['PASSWORD'] = \"yz1mq64u3h1sab93\"\nos.environ['DATABASE'] = \"ztqqdjf98kpnzn4n\"\ndb = SQL(os.environ['DB'])\"\"\"\n#db = SQL(\"sqlite:///peppertools.db\")\napp = Flask(__name__)\napp.add_template_global(get_level,name='get_level')\nJINJA2_ENVIRONMENT_OPTIONS = { 'undefined' : Undefined, '' : None,  'get_level': get_level}\nsocketio = SocketIO(app)\ncors = CORS(app)\napp.config['CORS_HEADERS'] = 'Content-Type'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "os.environ['DATABASE']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "os.environ['DATABASE'] = \"ztqqdjf98kpnzn4n\"\ndb = SQL(os.environ['DB'])\"\"\"\n#db = SQL(\"sqlite:///peppertools.db\")\napp = Flask(__name__)\napp.add_template_global(get_level,name='get_level')\nJINJA2_ENVIRONMENT_OPTIONS = { 'undefined' : Undefined, '' : None,  'get_level': get_level}\nsocketio = SocketIO(app)\ncors = CORS(app)\napp.config['CORS_HEADERS'] = 'Content-Type'\napp.secret_key = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = SQL(os.environ['DB'])\"\"\"\n#db = SQL(\"sqlite:///peppertools.db\")\napp = Flask(__name__)\napp.add_template_global(get_level,name='get_level')\nJINJA2_ENVIRONMENT_OPTIONS = { 'undefined' : Undefined, '' : None,  'get_level': get_level}\nsocketio = SocketIO(app)\ncors = CORS(app)\napp.config['CORS_HEADERS'] = 'Content-Type'\napp.secret_key = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\n#SESSION_COOKIE_DOMAIN = 'peppertools.herokuapp.com'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "#db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "#db = SQL(\"sqlite:///peppertools.db\")\napp = Flask(__name__)\napp.add_template_global(get_level,name='get_level')\nJINJA2_ENVIRONMENT_OPTIONS = { 'undefined' : Undefined, '' : None,  'get_level': get_level}\nsocketio = SocketIO(app)\ncors = CORS(app)\napp.config['CORS_HEADERS'] = 'Content-Type'\napp.secret_key = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\n#SESSION_COOKIE_DOMAIN = 'peppertools.herokuapp.com'\nos.environ['SECRET_KEY'] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.add_template_global(get_level,name='get_level')\nJINJA2_ENVIRONMENT_OPTIONS = { 'undefined' : Undefined, '' : None,  'get_level': get_level}\nsocketio = SocketIO(app)\ncors = CORS(app)\napp.config['CORS_HEADERS'] = 'Content-Type'\napp.secret_key = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\n#SESSION_COOKIE_DOMAIN = 'peppertools.herokuapp.com'\nos.environ['SECRET_KEY'] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\napp.config[\"SECRET_KEY\"] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "JINJA2_ENVIRONMENT_OPTIONS",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "JINJA2_ENVIRONMENT_OPTIONS = { 'undefined' : Undefined, '' : None,  'get_level': get_level}\nsocketio = SocketIO(app)\ncors = CORS(app)\napp.config['CORS_HEADERS'] = 'Content-Type'\napp.secret_key = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\n#SESSION_COOKIE_DOMAIN = 'peppertools.herokuapp.com'\nos.environ['SECRET_KEY'] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\napp.config[\"SECRET_KEY\"] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\nQRcode(app)\nTEMPLATE_FOLDER = '/templates/'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "socketio",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "socketio = SocketIO(app)\ncors = CORS(app)\napp.config['CORS_HEADERS'] = 'Content-Type'\napp.secret_key = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\n#SESSION_COOKIE_DOMAIN = 'peppertools.herokuapp.com'\nos.environ['SECRET_KEY'] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\napp.config[\"SECRET_KEY\"] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\nQRcode(app)\nTEMPLATE_FOLDER = '/templates/'\nHTML_FILE = 'layout.html'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "cors",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "cors = CORS(app)\napp.config['CORS_HEADERS'] = 'Content-Type'\napp.secret_key = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\n#SESSION_COOKIE_DOMAIN = 'peppertools.herokuapp.com'\nos.environ['SECRET_KEY'] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\napp.config[\"SECRET_KEY\"] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\nQRcode(app)\nTEMPLATE_FOLDER = '/templates/'\nHTML_FILE = 'layout.html'\n#app.add_template_global(name=HTML_FILE, f=TEMPLATE_FOLDER)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['CORS_HEADERS']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['CORS_HEADERS'] = 'Content-Type'\napp.secret_key = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\n#SESSION_COOKIE_DOMAIN = 'peppertools.herokuapp.com'\nos.environ['SECRET_KEY'] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\napp.config[\"SECRET_KEY\"] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\nQRcode(app)\nTEMPLATE_FOLDER = '/templates/'\nHTML_FILE = 'layout.html'\n#app.add_template_global(name=HTML_FILE, f=TEMPLATE_FOLDER)\n@app.before_request",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.secret_key = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\n#SESSION_COOKIE_DOMAIN = 'peppertools.herokuapp.com'\nos.environ['SECRET_KEY'] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\napp.config[\"SECRET_KEY\"] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\nQRcode(app)\nTEMPLATE_FOLDER = '/templates/'\nHTML_FILE = 'layout.html'\n#app.add_template_global(name=HTML_FILE, f=TEMPLATE_FOLDER)\n@app.before_request\ndef before_request():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "#SESSION_COOKIE_DOMAIN",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "#SESSION_COOKIE_DOMAIN = 'peppertools.herokuapp.com'\nos.environ['SECRET_KEY'] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\napp.config[\"SECRET_KEY\"] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\nQRcode(app)\nTEMPLATE_FOLDER = '/templates/'\nHTML_FILE = 'layout.html'\n#app.add_template_global(name=HTML_FILE, f=TEMPLATE_FOLDER)\n@app.before_request\ndef before_request():\n    \"\"\"Connect to the database before each request\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "os.environ['SECRET_KEY']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "os.environ['SECRET_KEY'] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\napp.config[\"SECRET_KEY\"] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\nQRcode(app)\nTEMPLATE_FOLDER = '/templates/'\nHTML_FILE = 'layout.html'\n#app.add_template_global(name=HTML_FILE, f=TEMPLATE_FOLDER)\n@app.before_request\ndef before_request():\n    \"\"\"Connect to the database before each request\"\"\"\n    db.connect()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"SECRET_KEY\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"SECRET_KEY\"] = 'caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79'\nQRcode(app)\nTEMPLATE_FOLDER = '/templates/'\nHTML_FILE = 'layout.html'\n#app.add_template_global(name=HTML_FILE, f=TEMPLATE_FOLDER)\n@app.before_request\ndef before_request():\n    \"\"\"Connect to the database before each request\"\"\"\n    db.connect()\n@app.after_request",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_FOLDER",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "TEMPLATE_FOLDER = '/templates/'\nHTML_FILE = 'layout.html'\n#app.add_template_global(name=HTML_FILE, f=TEMPLATE_FOLDER)\n@app.before_request\ndef before_request():\n    \"\"\"Connect to the database before each request\"\"\"\n    db.connect()\n@app.after_request\ndef after_request(response):\n    db.close()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "HTML_FILE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "HTML_FILE = 'layout.html'\n#app.add_template_global(name=HTML_FILE, f=TEMPLATE_FOLDER)\n@app.before_request\ndef before_request():\n    \"\"\"Connect to the database before each request\"\"\"\n    db.connect()\n@app.after_request\ndef after_request(response):\n    db.close()\n    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "#app.config[\"SESSION_FILE_DIR\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "#app.config[\"SESSION_FILE_DIR\"] = mkdtemp()\napp.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n@app.route('/favicon.ico')\ndef favicon():\n    return send_from_directory(os.path.join(app.root_path, 'static'),\n                          'favicon.ico',mimetype='image/vnd.microsoft.icon')\n@app.route('/')\n@login_required",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"SESSION_PERMANENT\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n@app.route('/favicon.ico')\ndef favicon():\n    return send_from_directory(os.path.join(app.root_path, 'static'),\n                          'favicon.ico',mimetype='image/vnd.microsoft.icon')\n@app.route('/')\n@login_required\n@managerLevel",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"SESSION_TYPE\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n@app.route('/favicon.ico')\ndef favicon():\n    return send_from_directory(os.path.join(app.root_path, 'static'),\n                          'favicon.ico',mimetype='image/vnd.microsoft.icon')\n@app.route('/')\n@login_required\n@managerLevel\ndef index():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "after_request",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def after_request(response):\n    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n    response.headers[\"Expires\"] = 0\n    response.headers[\"Pragma\"] = \"no-cache\"\n    return response\napp.config[\"SESSION_FILE_DIR\"] = mkdtemp()\napp.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n@app.route('/')",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def index():\n    return render_template(\"layout.html\", title= \"Inicio\", active1=\"active\",active2=\"\", active3=\"\", active4=\"\")\n@app.route('/clientes')\n@login_required\ndef clientes():\n    clientes = getData(\"key\",\"*\", \"Clientes\",\"\",\"\")\n    clientes_val = getData(\"val\",\"*\", \"Clientes\",\"\",\"\")\n    clientes_len = len(clientes)\n    val_len = len(clientes_val)\n    #return getClientes(\"key\",\"*\")",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "clientes",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def clientes():\n    clientes = getData(\"key\",\"*\", \"Clientes\",\"\",\"\")\n    clientes_val = getData(\"val\",\"*\", \"Clientes\",\"\",\"\")\n    clientes_len = len(clientes)\n    val_len = len(clientes_val)\n    #return getClientes(\"key\",\"*\")\n    return render_template(\"clientes.html\", title=\"Clientes\", clientes=clientes, clientes_val = clientes_val, clientes_len = clientes_len, \n                            val_len = val_len, active1=\"\",active2=\"\", active3=\"active\", active4=\"\")\n@app.route('/clientes/buscar')\n@login_required",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def search():\n    return underdev()\n@app.route('/clientes/editar', methods=[\"GET\", \"POST\"])\n@login_required\ndef editar():\n    if request.method == 'GET':\n        return redirect(\"/clientes\")\n    else:\n        clientes = getData(\"key\",\"*\", \"Clientes\")\n        id = request.form.get(\"id\")",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "editar",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def editar():\n    if request.method == 'GET':\n        return redirect(\"/clientes\")\n    else:\n        clientes = getData(\"key\",\"*\", \"Clientes\")\n        id = request.form.get(\"id\")\n        return render_template(\"client_edit.html\", clientes=clientes, id=id, active1=\"\",active2=\"\", active3=\"active\", active4=\"\")\n@app.route(\"/os\")\n@login_required\ndef os():",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def os():\n    os = getData(\"key\",\"*\", \"Cadastro_Os\",\"limit\",\"Numero_os\") \n    os_val = getData(\"val\",\"*\", \"Cadastro_Os\", \"limit\", \"Numero_os\")\n    os_len = len(os) \n    val_len = len(os_val)\n    return render_template(\"os.html\", os=os, os_val= os_val, os_len=os_len, val_len=val_len, active1=\"\",active2=\"\", active3=\"\", active4=\"active\")     \n@app.route(\"/os/imprimir\")\n@login_required\ndef print1():\n    #return render_template(\"imprimir_os.html\", title= \"Inicio\", active1=\"active\",active2=\"\", active3=\"\", active4=\"active\")",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "print1",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def print1():\n    #return render_template(\"imprimir_os.html\", title= \"Inicio\", active1=\"active\",active2=\"\", active3=\"\", active4=\"active\")\n    return underdev()\n@app.route(\"/os/buscar\")\n@login_required\ndef buscar():\n    #return render_template(\"buscar_os.html\", title= \"Inicio\", active1=\"\",active2=\"\", active3=\"\", active4=\"active\")\n    return underdev()\n@app.route('/login', methods=[\"GET\", \"POST\"])\ndef login():",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "buscar",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def buscar():\n    #return render_template(\"buscar_os.html\", title= \"Inicio\", active1=\"\",active2=\"\", active3=\"\", active4=\"active\")\n    return underdev()\n@app.route('/login', methods=[\"GET\", \"POST\"])\ndef login():\n    \"\"\"\n    if not request.is_secure and app.env != \"development\":\n        url = request.url.replace(\"http://\", \"https://\", 1)\n        code = 301\n        return redirect(url, code=code)  \"\"\"",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def login():\n    \"\"\"\n    if not request.is_secure and app.env != \"development\":\n        url = request.url.replace(\"http://\", \"https://\", 1)\n        code = 301\n        return redirect(url, code=code)  \"\"\"\n    x = datetime.datetime.now()\n    date = x.strftime(\"%d/%m/%Y\")\n    if request.method == 'POST':\n        user = request.form.get('user')",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def logout():\n    session.clear()\n    return redirect('/login')\n@app.route(\"/os/total\")\n@login_required\ndef all():\n    return getNumber()\n@app.route('/os/form/', methods=[\"POST\", \"GET\"])\n@login_required\ndef new_os():",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "all",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def all():\n    return getNumber()\n@app.route('/os/form/', methods=[\"POST\", \"GET\"])\n@login_required\ndef new_os():\n    clients = db.execute('SELECT DISTINCT Clientes.ID, nome FROM Cadastro_OS, Clientes WHERE Cadastro_OS.id_cliente = Clientes.ID')\n    x = datetime.datetime.now()\n    date = x.strftime(\"%d/%m/%Y\")\n    os_num = db.execute('SELECT MAX(Numero_Os) AS num_os FROM Cadastro_OS')\n    os_num = int(os_num[0]['num_os']) + 1",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "new_os",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def new_os():\n    clients = db.execute('SELECT DISTINCT Clientes.ID, nome FROM Cadastro_OS, Clientes WHERE Cadastro_OS.id_cliente = Clientes.ID')\n    x = datetime.datetime.now()\n    date = x.strftime(\"%d/%m/%Y\")\n    os_num = db.execute('SELECT MAX(Numero_Os) AS num_os FROM Cadastro_OS')\n    os_num = int(os_num[0]['num_os']) + 1\n    clients_len = len(clients)\n    if request.method == 'POST' and request.form['Id_Cliente'] != str(0):\n        print(dict(request.form))\n        data = dict(request.form)",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "os_edit",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def os_edit(osid):\n    osid2 = osid  \n    if request.method == 'POST':\n        data = dict(request.form)\n        try:\n            data['Numero_Os'] = int(data['Numero_Os'])\n            data['Id_Cliente'] = int(data['Id_Cliente'])\n            data['Numero_Nf'] = int(data['Numero_Nf'])\n            data['Numero_Pedido'] = int(data['Numero_Pedido'])\n            data['Quantidade'] = int(data['Quantidade'])",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "os_del",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def os_del(osid):\n    if request.method == 'GET':\n        try:\n            deleteData('Cadastro_Os', 'Numero_Os', osid)\n            flash('O.S deletada com sucesso')\n            return redirect('/os/form/')\n        except:\n            flash('Erro ao deletar O.S')\n            return redirect('/os/form/'+str(osid))\n    flash('Erro ao deletar O.S')",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def register():\n    \"\"\"Register user\n    if not request.is_secure and app.env != \"development\":\n        url = request.url.replace(\"http://\", \"https://\", 1)\n        code = 301\n        return redirect(url, code=code) \"\"\"\n    if request.method == 'POST':\n        # Ensure username was submitted\n        if not request.form.get(\"username\"):\n            flash(\"Usuário inválido.\")",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def print(osid):\n    if request.method == 'GET':\n        os = getOs(osid)\n        field = dict(os[0])\n        res = getClient(osid)\n       #print(res)\n        qr = \"https://peppertools.herokuapp.com/os/\"+str(field['Numero_Os'])\n        field['nome'] = res\n        field['Data_digit'] = datetime.datetime.strptime(checkDate(field['Data']), '%d/%m/%Y').strftime('%y')\n        field['Data'] = checkDate(field['Data'])",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "access",
        "kind": 2,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "def access(osid):\n    session['osid'] = osid\n    return redirect('/login')",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "db = SQL(\"mysql://rkpmtiv6bbvm81e5:yz1mq64u3h1sab93@nwhazdrp7hdpd4a4.cbetxkdyhwsb.us-east-1.rds.amazonaws.com:3306/ztqqdjf98kpnzn4n\")\nJINJA2_ENVIRONMENT_OPTIONS = { 'undefined' : Undefined }\napp = Flask(__name__)\nQRcode(app)\n@app.after_request\ndef after_request(response):\n    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n    response.headers[\"Expires\"] = 0\n    response.headers[\"Pragma\"] = \"no-cache\"\n    return response",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "JINJA2_ENVIRONMENT_OPTIONS",
        "kind": 5,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "JINJA2_ENVIRONMENT_OPTIONS = { 'undefined' : Undefined }\napp = Flask(__name__)\nQRcode(app)\n@app.after_request\ndef after_request(response):\n    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n    response.headers[\"Expires\"] = 0\n    response.headers[\"Pragma\"] = \"no-cache\"\n    return response\napp.config[\"SESSION_FILE_DIR\"] = mkdtemp()",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "app = Flask(__name__)\nQRcode(app)\n@app.after_request\ndef after_request(response):\n    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n    response.headers[\"Expires\"] = 0\n    response.headers[\"Pragma\"] = \"no-cache\"\n    return response\napp.config[\"SESSION_FILE_DIR\"] = mkdtemp()\napp.config[\"SESSION_PERMANENT\"] = False",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "app.config[\"SESSION_FILE_DIR\"]",
        "kind": 5,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "app.config[\"SESSION_FILE_DIR\"] = mkdtemp()\napp.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n@app.route('/')\n@login_required\ndef index():\n    return render_template(\"layout.html\", title= \"Inicio\", active1=\"active\",active2=\"\", active3=\"\", active4=\"\")\n@app.route('/clientes')\n@login_required",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "app.config[\"SESSION_PERMANENT\"]",
        "kind": 5,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "app.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n@app.route('/')\n@login_required\ndef index():\n    return render_template(\"layout.html\", title= \"Inicio\", active1=\"active\",active2=\"\", active3=\"\", active4=\"\")\n@app.route('/clientes')\n@login_required\ndef clientes():",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "app.config[\"SESSION_TYPE\"]",
        "kind": 5,
        "importPath": "bla",
        "description": "bla",
        "peekOfCode": "app.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n@app.route('/')\n@login_required\ndef index():\n    return render_template(\"layout.html\", title= \"Inicio\", active1=\"active\",active2=\"\", active3=\"\", active4=\"\")\n@app.route('/clientes')\n@login_required\ndef clientes():\n    clientes = getData(\"key\",\"*\", \"Clientes\",\"\",\"\")",
        "detail": "bla",
        "documentation": {}
    },
    {
        "label": "auth_required",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def auth_required(f):\n    \"\"\"\n    Decorate routes to require login.\n    http://flask.pocoo.org/docs/1.0/patterns/viewdecorators/\n    \"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if request.headers.get('Authorization'):\n            try: \n                print(request.headers.get('Authorization'))",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "login_required",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def login_required(f):\n    \"\"\"\n    Decorate routes to require login.\n    http://flask.pocoo.org/docs/1.0/patterns/viewdecorators/\n    \"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        #try:\n        if session.get('token'):\n            try:",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "get_level",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def get_level():\n    try:\n        if session.get('token'):\n            tok = jwt.decode(session.get('token'), os.environ['SECRET_KEY'], algorithms=['HS256'])\n            return tok['level'] \n    except:\n        pass\ndef adminLevel(f):\n    @wraps(f)\n    def checklevel(*args, **kwargs):",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "adminLevel",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def adminLevel(f):\n    @wraps(f)\n    def checklevel(*args, **kwargs):\n       tok = get_level()\n       if tok == 4:\n           return f(*args, **kwargs)\n       else:\n           return redirect('/')\n    return checklevel\ndef financialLevel(f):",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "financialLevel",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def financialLevel(f):\n    @wraps(f)\n    def checklevel(*args, **kwargs):\n       tok = get_level()\n       if tok == 3 or tok== 4:\n           return f(*args, **kwargs)\n       else:\n           return redirect('/')\n    return checklevel\ndef employeeLevel(f):",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "employeeLevel",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def employeeLevel(f):\n    @wraps(f)\n    def checklevel(*args, **kwargs):\n       tok = get_level()\n       if tok == 1 or tok == 4:\n           return f(*args, **kwargs)\n       else:\n           return redirect('/')\n    return checklevel\ndef managerLevel(f):",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "managerLevel",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def managerLevel(f):\n    @wraps(f)\n    def checklevel(*args, **kwargs):\n       tok = get_level()\n       if tok == 2 or tok == 4:\n           return f(*args, **kwargs)\n       else:\n           return redirect('/')\n    return checklevel\ndef login_user(user, password, jwtoken):",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def login_user(user, password, jwtoken):\n    rows=list(usuarios.select().where(usuarios.ds_login == user).dicts())\n    #rows=[model_to_dict(row) for row in rows]\n    #rows = db.execute(\"SELECT * FROM usuarios WHERE ds_login = \\'\"+ user + \"\\'\")\n    #print(rows[0]['ds_senha'])\n    #print(rows)\n    if not rows:\n        flash(\"Usuario/senha Inválida\")\n        return redirect('/login')\n    print(rows[0]['ds_senha'])",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "valClientes",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def valClientes(id):\n    rows = Clientes.select().where(Clientes.ID == id)\n    rows = [model_to_dict(row) for row in rows]\n    return rows\ndef underdev():\n    return render_template('manutencao.html',  title= \"Inicio\", active1=\"\",active2=\"\", active3=\"\", active4=\"active\")\ndef insertData(list, table, pref1=\"\"):\n    final = \"error\"\n    '''    \n    stmt = \"INSERT INTO \"+table+\" (\"",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "underdev",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def underdev():\n    return render_template('manutencao.html',  title= \"Inicio\", active1=\"\",active2=\"\", active3=\"\", active4=\"active\")\ndef insertData(list, table, pref1=\"\"):\n    final = \"error\"\n    '''    \n    stmt = \"INSERT INTO \"+table+\" (\"\n    values = \" VALUES (\"\n    for val in list:\n        if not list[val] or list[val] == val:\n            pass",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "insertData",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def insertData(list, table, pref1=\"\"):\n    final = \"error\"\n    '''    \n    stmt = \"INSERT INTO \"+table+\" (\"\n    values = \" VALUES (\"\n    for val in list:\n        if not list[val] or list[val] == val:\n            pass\n        else:\n            stmt = stmt + str(val) + \",\"",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "getClient",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def getClient( option='ALL'):\n    if option == 'ALL':\n        rows = Clientes.select(Clientes.ID, Clientes.nome).join(Cadastro_OS, on=(Cadastro_OS.Id_Cliente == Clientes.ID)).distinct()\n        rows = [model_to_dict(row) for row in rows]\n        #rows = db.execute('SELECT DISTINCT Clientes.ID, nome FROM Cadastro_OS, Clientes WHERE Cadastro_OS.id_cliente = Clientes.ID')\n    else:\n        rows = Clientes.select(Clientes.ID, Clientes.nome).join(Cadastro_OS, on=(Cadastro_OS.Id_Cliente == Clientes.ID, Cadastro_OS.Id == option)).distinct()\n        rows = [model_to_dict(row) for row in rows]\n        #rows = db.execute('SELECT DISTINCT nome FROM Cadastro_OS, Clientes WHERE Cadastro_OS.id_cliente = Clientes.ID AND Cadastro_OS.Id = ?', option) \n        rows = rows[0]",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "getOs",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def getOs(option = 'ALL'):\n    if option == 'ALL':\n        rows = int(Cadastro_OS.select(fn.MAX(Cadastro_OS.Numero_Os)).scalar())+1\n       # rows = int(rows[0]['num_os']) + 1\n    else:\n        stmt = 'SELECT * FROM Cadastro_OS WHERE Id = '+ str(option)\n        rows = os = Cadastro_OS.select().where(Cadastro_OS == osid)\n    return rows\ndef updateData(list, table, col, Id):\n  #  print(list)",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "updateData",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def updateData(list, table, col, Id):\n  #  print(list)\n    stmt = \"UPDATE \" + table + \" SET \"\n    values = \"\"\n    for item in list:\n        if not list[item] or list[item] == item or item == 'id':\n            pass\n        else:\n            if not isinstance(list[item], str):\n                values = values + item + \"=\" + str(list[item]) + \",\"",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "deleteData",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def deleteData(table,col,Id):\n    try:\n        db.execute('DELETE FROM ' + table + ' WHERE ' + col + ' = ' + str(Id))\n        return redirect('/os')\n    except:\n        return redirect('/os/form/' + str(Id))\ndef checkDate(str1):\n    str2 = str1\n    try:\n        print (len(str1))",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "checkDate",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def checkDate(str1):\n    str2 = str1\n    try:\n        print (len(str1))\n        if len(str1) != 10:\n            str2 = ''\n            str2 = '0' + str1\n            str2 = datetime.datetime.strptime(str2, '%m/%d/%y, %H:%M:%S %p').strftime('%d/%m/%Y')  \n        else:\n            str2 = ''",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "render_list",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def render_list(table):\n    print(table)\n    try:\n        tblist = str_to_class(table).select().distinct()\n        keys = list(str_to_class(table)._meta.fields.keys())\n    except:\n        try:\n            tblist = str_to_class(table.capitalize()).select().distinct()\n            keys = list(str_to_class(table.capitalize())._meta.fields.keys())\n        except:",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "logoutCommit",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def logoutCommit():\n    session.clear()\n    return redirect('/login')\ndef str_to_class(classname):\n    return getattr(sys.modules[__name__], classname)\ndef registerprocess(id_proc, id_os, inicio=None, fim=None, ):\n    if inicio and not fim:\n       Historico_os.create(inicio=inicio, id_proc=id_proc, id_os=id_os)\n       return True\n    if fim and not inicio:",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "str_to_class",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def str_to_class(classname):\n    return getattr(sys.modules[__name__], classname)\ndef registerprocess(id_proc, id_os, inicio=None, fim=None, ):\n    if inicio and not fim:\n       Historico_os.create(inicio=inicio, id_proc=id_proc, id_os=id_os)\n       return True\n    if fim and not inicio:\n       Historico_os.create(fim=fim, id_proc=id_proc, id_os=id_os)\n       return True\n    if not inicio and not fim:",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "registerprocess",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def registerprocess(id_proc, id_os, inicio=None, fim=None, ):\n    if inicio and not fim:\n       Historico_os.create(inicio=inicio, id_proc=id_proc, id_os=id_os)\n       return True\n    if fim and not inicio:\n       Historico_os.create(fim=fim, id_proc=id_proc, id_os=id_os)\n       return True\n    if not inicio and not fim:\n       Historico_os.create(id_proc=id_proc, id_os=id_os)\n       return True",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "os_em_andamento",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def os_em_andamento(n_os=None):\n    if n_os:\n        os = list(Cadastro_OS.select(Cadastro_OS.Numero_Os, Historico_os.qtd ,processos.Nome, Historico_os.inicio, Historico_os.fim, Historico_os.data, Historico_os.ID, Clientes.nome).from_(Cadastro_OS, processos, Historico_os, Clientes).where(Historico_os.id_os == Cadastro_OS.Id, Historico_os.id_proc == processos.ID, Cadastro_OS.Numero_Os==n_os, Cadastro_OS.Id_Cliente == Clientes.ID).order_by(Cadastro_OS.Numero_Os.desc(), Historico_os.ID.desc()).dicts())\n    #maxid = Historico_os.select(fn.MAX(Historico_os.periodo)).scalar()\n    else:\n        os = list(Cadastro_OS.select(Cadastro_OS.Numero_Os, Historico_os.qtd ,processos.Nome, Historico_os.inicio, Historico_os.fim, Historico_os.data, Historico_os.ID, Clientes.nome).from_(Cadastro_OS, processos, Historico_os, Clientes).where(Historico_os.id_os == Cadastro_OS.Id, Historico_os.id_proc == processos.ID, Cadastro_OS.Id_Cliente == Clientes.ID).order_by(Cadastro_OS.Numero_Os.desc()).dicts())\n    #print(os)\n    #os = os.reverse()\n    for item in os:\n        print(item)",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "os_em_historico",
        "kind": 2,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "def os_em_historico():\n    os = list(Cadastro_OS.select(Cadastro_OS.Numero_Os, processos.Nome, Historico_os.inicio, Historico_os.fim).from_(Cadastro_OS, processos, Historico_os).where(Historico_os.id_os == Cadastro_OS.Id, Historico_os.id_proc == processos.ID).order_by(Cadastro_OS.Numero_Os.desc()).dicts())\n    n_os = []\n    for row in os:\n        for col in row:\n           # print(col)\n            if col == 'Numero_Os':\n                #print(row[col])\n                n_os.append(row[col])\n    n_os = set(n_os)",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "os.environ['SECRET_KEY']",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "os.environ['SECRET_KEY'] =  \"caf3cc4546725599c99158599d443fc815bd137b73b0b69bc804f3ba483aeaa224c75a2b3fc1f35eccfdfef6cdd01858450435ef6daed0c49bf01fbe1e7b3b79\"\nos.environ['DB'] =  \"mysql://rkpmtiv6bbvm81e5:yz1mq64u3h1sab93@nwhazdrp7hdpd4a4.cbetxkdyhwsb.us-east-1.rds.amazonaws.com:3306/ztqqdjf98kpnzn4n\"\nos.environ['HOST']= \"nwhazdrp7hdpd4a4.cbetxkdyhwsb.us-east-1.rds.amazonaws.com\"\nos.environ['USER'] =  \"rkpmtiv6bbvm81e5\"\nos.environ['PASSWORD'] = \"yz1mq64u3h1sab93\"\nos.environ['DATABASE'] = \"ztqqdjf98kpnzn4n\"\ndb = SQL(os.environ['DB'])\nconn = sqlite3.connect(\n            host=os.environ['HOST'],\n            user=os.environ['USER'],",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "os.environ['DB']",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "os.environ['DB'] =  \"mysql://rkpmtiv6bbvm81e5:yz1mq64u3h1sab93@nwhazdrp7hdpd4a4.cbetxkdyhwsb.us-east-1.rds.amazonaws.com:3306/ztqqdjf98kpnzn4n\"\nos.environ['HOST']= \"nwhazdrp7hdpd4a4.cbetxkdyhwsb.us-east-1.rds.amazonaws.com\"\nos.environ['USER'] =  \"rkpmtiv6bbvm81e5\"\nos.environ['PASSWORD'] = \"yz1mq64u3h1sab93\"\nos.environ['DATABASE'] = \"ztqqdjf98kpnzn4n\"\ndb = SQL(os.environ['DB'])\nconn = sqlite3.connect(\n            host=os.environ['HOST'],\n            user=os.environ['USER'],\n            password=os.environ['PASSWORD'],",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "os.environ['USER']",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "os.environ['USER'] =  \"rkpmtiv6bbvm81e5\"\nos.environ['PASSWORD'] = \"yz1mq64u3h1sab93\"\nos.environ['DATABASE'] = \"ztqqdjf98kpnzn4n\"\ndb = SQL(os.environ['DB'])\nconn = sqlite3.connect(\n            host=os.environ['HOST'],\n            user=os.environ['USER'],\n            password=os.environ['PASSWORD'],\n            database=os.environ['DATABASE']\n        )\"\"\"",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "os.environ['PASSWORD']",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "os.environ['PASSWORD'] = \"yz1mq64u3h1sab93\"\nos.environ['DATABASE'] = \"ztqqdjf98kpnzn4n\"\ndb = SQL(os.environ['DB'])\nconn = sqlite3.connect(\n            host=os.environ['HOST'],\n            user=os.environ['USER'],\n            password=os.environ['PASSWORD'],\n            database=os.environ['DATABASE']\n        )\"\"\"\n#db = SQL(\"sqlite:///peppertools34.db\")",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "os.environ['DATABASE']",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "os.environ['DATABASE'] = \"ztqqdjf98kpnzn4n\"\ndb = SQL(os.environ['DB'])\nconn = sqlite3.connect(\n            host=os.environ['HOST'],\n            user=os.environ['USER'],\n            password=os.environ['PASSWORD'],\n            database=os.environ['DATABASE']\n        )\"\"\"\n#db = SQL(\"sqlite:///peppertools34.db\")\n'''def getData(pref1, cond1, table, limit=False, column = \"\"):",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "db = SQL(os.environ['DB'])\nconn = sqlite3.connect(\n            host=os.environ['HOST'],\n            user=os.environ['USER'],\n            password=os.environ['PASSWORD'],\n            database=os.environ['DATABASE']\n        )\"\"\"\n#db = SQL(\"sqlite:///peppertools34.db\")\n'''def getData(pref1, cond1, table, limit=False, column = \"\"):\n    if not pref1 or not cond1 or not table:",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "conn = sqlite3.connect(\n            host=os.environ['HOST'],\n            user=os.environ['USER'],\n            password=os.environ['PASSWORD'],\n            database=os.environ['DATABASE']\n        )\"\"\"\n#db = SQL(\"sqlite:///peppertools34.db\")\n'''def getData(pref1, cond1, table, limit=False, column = \"\"):\n    if not pref1 or not cond1 or not table:\n        return None",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "#db",
        "kind": 5,
        "importPath": "helper",
        "description": "helper",
        "peekOfCode": "#db = SQL(\"sqlite:///peppertools34.db\")\n'''def getData(pref1, cond1, table, limit=False, column = \"\"):\n    if not pref1 or not cond1 or not table:\n        return None\n    else:   \n        #conn2 = sqlite3.connect(\"mysql://rkpmtiv6bbvm81e5:yz1mq64u3h1sab93@nwhazdrp7hdpd4a4.cbetxkdyhwsb.us-east-1.rds.amazonaws.com:3306/ztqqdjf98kpnzn4n\")\n        db2 = db\n        cond2 = str(cond1)\n        table2 = str(table)\n        if limit == True and column !=\"\":",
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "Clientes",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class Clientes(Model):\n    ID= PrimaryKeyField()\n    cnpj = TextField()\n    email = TextField()  \n    telefone = TextField() \n    celular = TextField()\n    obs = TextField()\n    cod_cli = TextField()\n    ie = TextField()\n    nome = TextField()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "Cadastro_OS",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class Cadastro_OS(Model):\n    Id = PrimaryKeyField()\n    Tipo = TextField()\n    Numero_Os = IntegerField()\n    Id_Cliente = IntegerField()\n    Data = DateTimeField(default=datetime.datetime.now)\n    Prazo = DateTimeField()\n    gravacao = TextField()\n    gravacao2 = TextField()\n    Ferramenta = TextField()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "Estoque",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class Estoque(Model):\n    ID = PrimaryKeyField()\n    id_cliente = IntegerField()\n    ferramenta = TextField()\n    material = TextField()\n    cod_pc = TextField()\n    mm = TextField()\n    qt = IntegerField()\n    gaveta = IntegerField()\n    data = DateTimeField(default=datetime.datetime.now)",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "usuarios",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class usuarios(Model):\n    ID = PrimaryKeyField()\n    ds_senha = TextField()\n    ds_login = TextField()\n    nivel = IntegerField()\n    desc = TextField()\n    class Meta: \n        db_table = 'usuarios'\n        database = db\nclass contasapagar(Model):",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "contasapagar",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class contasapagar(Model):\n    ID = PrimaryKeyField()\n    vencimento = TextField()\n    descricao = TextField()\n    cod_fornecedor = IntegerField()\n    valor = FloatField()\n    pago = IntegerField()\n    data_pagamento = TextField()\n    class Meta: \n        db_table = 'contasapagar'",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "orcamento",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class orcamento(Model):\n    ID = PrimaryKeyField()\n    numero = IntegerField()\n    id_cliente = IntegerField()\n    ano = IntegerField()\n    cod_item = IntegerField()\n    data = DateTimeField(default=datetime.datetime.now)\n    prazo_entrega = TextField()\n    prazo_pagto = TextField()\n    ipi = TextField()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "caixa",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class caixa(Model):\n    id = PrimaryKeyField()\n    tipo = TextField()\n    descricao = TextField()\n    valor = FloatField()\n    data = TextField()\n    mes  = TextField()\n    ano = IntegerField()\n    class Meta:\n        db_table = 'caixa'",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "Fornecedores",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class Fornecedores(Model):\n    ID = PrimaryKeyField()\n    cod_for = TextField()\n    nome = TextField()\n    cnpj = TextField()\n    ie = TextField()\n    endereco = TextField()\n    cidade = TextField()\n    estado = TextField()\n    cep = TextField()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "Ferramenta",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class Ferramenta(Model):\n    ID = PrimaryKeyField()\n    Ferramenta = TextField()\n    Cod_ferramenta = TextField()\n    cod_cli = IntegerField()\n    mm = IntegerField()\nclass compras(Model):\n    ID = PrimaryKeyField()\n    cod_fornecedor = IntegerField()\n    data = DateTimeField(default=datetime.datetime.now)",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "compras",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class compras(Model):\n    ID = PrimaryKeyField()\n    cod_fornecedor = IntegerField()\n    data = DateTimeField(default=datetime.datetime.now)\n    qnt = IntegerField()\n    preco = FloatField()\n    desc = TextField()\n    ipi = TextField()\n    prazo = TextField()\n    cond = TextField()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "contas_desc",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class contas_desc(Model):\n    id = PrimaryKeyField()\n    descx = TextField()\nclass controle(Model):\n    id = PrimaryKeyField()\n    cod_item = IntegerField()\n    cod_cli = IntegerField()\n    gaveta = IntegerField()\n    quantidade = IntegerField()\n    data = TextField()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "controle",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class controle(Model):\n    id = PrimaryKeyField()\n    cod_item = IntegerField()\n    cod_cli = IntegerField()\n    gaveta = IntegerField()\n    quantidade = IntegerField()\n    data = TextField()\n    class Meta:\n        db_table = 'controle'\n        database = db",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "Pedidos",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class Pedidos(Model):\n    ID = PrimaryKeyField()\n    numero = IntegerField()\n    ano = IntegerField()\n    id_cliente = IntegerField()\n    id_ferramenta = IntegerField()\n    especificacao = TextField()\n    desenho = TextField()\n    unidade = TextField()\n    qnt = IntegerField()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "funcionarios",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class funcionarios(Model):\n    id = PrimaryKeyField()\n    funcionario = TextField()\n    nome = TextField()\n    senha = TextField()\n    class Meta:\n        db_table = 'funcionarios'\n        database = db\nclass ponto(Model):\n    id = PrimaryKeyField()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "ponto",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class ponto(Model):\n    id = PrimaryKeyField()\n    cod_func = IntegerField()\n    data = DateTimeField(default=datetime.datetime.now)\n    inicio = TextField(default = str(datetime.datetime.now().hour)+':'+str(datetime.datetime.now().minute))\n    fim =  TextField(default = str(datetime.datetime.now().hour)+':'+str(datetime.datetime.now().minute))\n    desc = TextField()\n    class Meta:\n        db_table = 'ponto'\n        database = db",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "Material",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class Material(Model):\n    ID = PrimaryKeyField()\n    material = TextField()\n    cod_material = TextField()\n    class Meta:\n        db_table = 'Material'\n        database = db\nclass notafiscal(Model):\n    id_nf = PrimaryKeyField()\n    numero_nf = IntegerField()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "notafiscal",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class notafiscal(Model):\n    id_nf = PrimaryKeyField()\n    numero_nf = IntegerField()\n    data_nf= TextField()\n    valor_nf = TextField()\n    class Meta:\n        db_table = 'notafiscal'\n        database = db\nclass processos(Model):\n    ID = PrimaryKeyField()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "processos",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class processos(Model):\n    ID = PrimaryKeyField()\n    Nome = TextField()\n    Tempo_Objetivo = TextField()\n    class Meta:\n        db_table = 'processos'\n        database = db\nclass Historico_os(Model):\n    ID = PrimaryKeyField()\n    id_proc = IntegerField()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "Historico_os",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class Historico_os(Model):\n    ID = PrimaryKeyField()\n    id_proc = IntegerField()\n    id_os = IntegerField()\n    inicio = TextField()\n    fim = TextField()\n    periodo = IntegerField()\n    data = TextField()\n    qtd = IntegerField() \n    class Meta:",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "itens",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class itens(Model):\n    id= PrimaryKeyField()\n    descricao= TextField()\n    codigo=TextField()\n    material= TextField()\n    esp1= TextField()\n    esp2= TextField()\n    esp3= TextField()\n    class Meta:\n        db_table = 'itens'",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "linha",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class linha(Model):\n    id= PrimaryKeyField()\n    nome= TextField()\n    numero_inicial = IntegerField()\n    class Meta:\n        db_table = 'linha'\n        database = db",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "home = expanduser(\"~\")\nperms = {'key': home+'/ssl/ca.pem', \n         'cert': home+'/ssl/ca.pem', \n         'ca': home+'/ssl/ca.pem',\n          'useSSL':True,\n         'verifyServerCertificate': False,\n         }\ndb = None\nwhile not db:\n    db = MySQLDatabase('no5k31nx620ibo35', user='yky1691ysl6jmyiv', passwd='p9roi4nf30ztb4xh', charset='utf8mb4',  host='cis9cbtgerlk68wl.cbetxkdyhwsb.us-east-1.rds.amazonaws.com', port=3306)",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "perms",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "perms = {'key': home+'/ssl/ca.pem', \n         'cert': home+'/ssl/ca.pem', \n         'ca': home+'/ssl/ca.pem',\n          'useSSL':True,\n         'verifyServerCertificate': False,\n         }\ndb = None\nwhile not db:\n    db = MySQLDatabase('no5k31nx620ibo35', user='yky1691ysl6jmyiv', passwd='p9roi4nf30ztb4xh', charset='utf8mb4',  host='cis9cbtgerlk68wl.cbetxkdyhwsb.us-east-1.rds.amazonaws.com', port=3306)\nclass Clientes(Model):",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "db = None\nwhile not db:\n    db = MySQLDatabase('no5k31nx620ibo35', user='yky1691ysl6jmyiv', passwd='p9roi4nf30ztb4xh', charset='utf8mb4',  host='cis9cbtgerlk68wl.cbetxkdyhwsb.us-east-1.rds.amazonaws.com', port=3306)\nclass Clientes(Model):\n    ID= PrimaryKeyField()\n    cnpj = TextField()\n    email = TextField()  \n    telefone = TextField() \n    celular = TextField()\n    obs = TextField()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 6,
        "importPath": "page",
        "description": "page",
        "peekOfCode": "class page:\n    '''\n    arg: \n    table, content, edit, select, select2\n    '''\n    def __init__(self, table, content = None, edit=False, select = None, select2 = None):\n        self.col = []\n        self.table = table\n        self.Keys = list(globals()[self.table]._meta.fields.keys())\n        self.edit = edit",
        "detail": "page",
        "documentation": {}
    },
    {
        "label": "getNumber",
        "kind": 2,
        "importPath": "tmp",
        "description": "tmp",
        "peekOfCode": "def getNumber(client = 0):\n    try:\n        if client != 0:\n            row = db.execute(\"SELECT COUNT(*) AS total FROM Cadastro_OS WHERE id_cliente = ? \", client)\n        else:\n            row = db.execute(\"SELECT COUNT(*) AS total FROM Cadastro_OS\")\n        return jsonify(row[0]['total'])\n    except:\n        return jsonify('Error')\ndef getAll(option = 'ALL'):",
        "detail": "tmp",
        "documentation": {}
    },
    {
        "label": "getAll",
        "kind": 2,
        "importPath": "tmp",
        "description": "tmp",
        "peekOfCode": "def getAll(option = 'ALL'):\n    try:\n        if option == 'ALL': \n            stmt = \"SELECT * FROM Cadastro_OS\"\n        else:\n            stmt = \"SELECT * FROM Cadastro_OS WHERE Numero_Os = \" + str(option)   \n        row = db.execute(stmt)\n        return jsonify(row[0])\n    except:\n        return jsonify(\"Nothing found\")",
        "detail": "tmp",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "tmp",
        "description": "tmp",
        "peekOfCode": "db = SQL(\"sqlite:///peppertools.db\")\ndef getNumber(client = 0):\n    try:\n        if client != 0:\n            row = db.execute(\"SELECT COUNT(*) AS total FROM Cadastro_OS WHERE id_cliente = ? \", client)\n        else:\n            row = db.execute(\"SELECT COUNT(*) AS total FROM Cadastro_OS\")\n        return jsonify(row[0]['total'])\n    except:\n        return jsonify('Error')",
        "detail": "tmp",
        "documentation": {}
    }
]